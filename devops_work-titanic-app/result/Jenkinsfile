def label = "mypod-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount,
    containers: [containerTemplate(name: 'helm', image: 'alpine/helm:3.5.3', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'docker', image: 'docker:19.03', ttyEnabled: true, command: 'cat')],
        volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
) {

    node(label) {
        def GIT_URL= 'https://bitbucket.org/devops_work/titanic-app.git'
		def GIT_CREDENTIAL_ID ='scm-cred'
		def GIT_BRANCH='master'
        
        stage ('Git Checkout'){
			git branch: GIT_BRANCH, url: GIT_URL, credentialsId: GIT_CREDENTIAL_ID
        }
        
        stage ('Build Docker Image'){
            container('docker'){
    			echo "building docker image.."
    			dir("${env.WORKSPACE}/result/docker/api/"){
                    sh "pwd && ls -lrt"
                    sh ("docker build --network=host -t nexgtech/titanic-api:${env.BUILD_ID}  .")
                }
            }
        }
        
        stage ('Publish Docker image'){
            container('docker'){
			    echo "push docker image"
			    withCredentials([[$class: 'UsernamePasswordMultiBinding',
                    credentialsId: 'docker-cred',
                    usernameVariable: 'DOCKER_HUB_USER',
                    passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
                        sh ('docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}')
			            sh ("docker push nexgtech/titanic-api:${env.BUILD_ID}")
                }
            }
        }
        
        stage ('Deploy to Kubernetes'){
            container('helm'){
                echo "deploying to kubernetes"
			    sh "helm upgrade --install titanic result/helm/api-app/ --set image.repository=nexgtech/titanic-api --set image.tag=${env.BUILD_ID} -n test --wait"   
            }
        }
	}
 }